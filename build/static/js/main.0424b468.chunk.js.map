{"version":3,"sources":["components/weather/todayPanel.js","components/weather/smallDescription.js","components/weather/dayPanel.js","components/weather/weekPanel.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Today","props","useState","temperature","windSpeed","humidity","data","setData","useEffect","locations","now","Date","endOfDay","valueOf","forecast","result","valuePairs","Temperature","timeValuePairs","i","length","timeStamp","time","push","value","console","log","getTemperatureSeries","WindSpeedMS","getWindSpeedSeries","Humidity","getHumiditySeries","tSeries","hSeries","wSeries","average","array","reduce","a","b","tMax","Math","round","max","apply","tMin","min","h","w","className","style","backgroundColor","textTransform","cx","cy","r","fill","x","y","Description","Day","t","weekdayName","WeekPanel","startOfDay","endOfSecondDay","tomorrow","theDayAfter","weekdays","tomorrowName","getDay","theDayAfterName","Weather","initLocation","location","setLocation","inputColor","setInputColor","setForecast","connection","Metolib","WfsConnection","connect","getData","requestParameter","begin","end","timestep","sites","callback","errors","info","disconnect","type","onChange","event","target","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0424b468.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport './graphics.css'\n\nconst Today = (props) => {\n\n    const [data, setData] = useState({\n        temperature: [0,0,0],\n        windSpeed:[0,0,0],\n        humidity:[0,0,0]\n    })\n\n    useEffect(()=> {\n        //data extraction tools\n        const getTemperatureSeries = (forecast,now,endOfDay) => {\n            // console.log('timeStamp' + new Date(now) + 'endOfDay' + new Date(endOfDay))\n            let result = []\n            const valuePairs = forecast.locations[0].data.Temperature.timeValuePairs\n            for ( let i = 0; i < valuePairs.length; i++) {\n                let timeStamp = new Date(valuePairs[i].time)\n                if ( now < timeStamp && timeStamp < endOfDay) {\n\n                    result.push(valuePairs[i].value)\n                    console.log(timeStamp + valuePairs[i].value)\n                }\n            }\n            return result\n        }\n        const getWindSpeedSeries = (forecast,now,endOfDay) => {\n            // console.log(forecast.locations[0].data)\n            let result = []\n            const valuePairs = forecast.locations[0].data.WindSpeedMS.timeValuePairs\n            for ( let i = 0; i < valuePairs.length; i++) {\n                let timeStamp = new Date(valuePairs[i].time)\n                if ( now < timeStamp && timeStamp < endOfDay) {\n\n                    result.push(valuePairs[i].value)\n                }\n            }\n            return result\n        }\n        const getHumiditySeries = (forecast,now,endOfDay) => {\n            let result = []\n            const valuePairs = forecast.locations[0].data.Humidity.timeValuePairs\n            for ( let i = 0; i < valuePairs.length; i++) {\n                let timeStamp = new Date(valuePairs[i].time)\n                if ( now < timeStamp && timeStamp < endOfDay) {\n\n                    result.push(valuePairs[i].value)\n                }\n            }\n            return result\n        }\n\n        if (props.data.locations) {\n            const now = new Date()\n            const GMT = 3\n            const AM = 6 - GMT\n            const endOfDay = new Date( now.valueOf() - now.valueOf()%(1000*60*60*24) + 1000*60*60*AM + 1000*60*60*24 )\n            setData({\n                temperature: getTemperatureSeries(props.data,now,endOfDay),\n                windSpeed: getWindSpeedSeries(props.data,now,endOfDay),\n                humidity:getHumiditySeries(props.data,now,endOfDay)\n            })\n        }\n\n    }, [props.data])\n    // console.log('getTodayData', result)\n\n    //Series are array of becoming temperatures for every hour\n    const tSeries = data.temperature\n    const hSeries = data.humidity\n    const wSeries = data.windSpeed\n\n    const bgColor = 'lightblue'\n\n    const average = (array) => {return array.reduce(function(a, b) { return a + b; })}\n\n    const tMax = Math.round(Math.max.apply(Math, tSeries))\n    const tMin = Math.round(Math.min.apply(Math, tSeries))\n    const h = Math.round(average(hSeries)/hSeries.length) + ' %'\n    const w = Math.round(average(wSeries)/hSeries.length) + ' m/s'\n\n    return <div className='todayPanel' style={{ backgroundColor: bgColor }}>\n        <h1 style={{textTransform: 'capitalize'}}>Today</h1>\n        <svg>\n            {/*TODO:create different backgrounds for different weather*/}\n            <circle cx={200} cy={100} r={100} fill=\"yellow\" />\n\n            <text x='20' y='30' className='textBig'>{tMax > 0 ? '+' : '-'}{tMax}</text>\n\n            <text x='76' y='32' className='textMedium'>/</text>\n            <text x='82' y='36' className='textMedium'>{tMin > 0 ? '+' : '-'}{tMin} °C</text>\n            <text x='80' y='30' className='textBig'></text>\n\n            <text x='20' y='80' className='textMedium'>Wind {w}</text>\n            <text x='20' y='110' className='textMedium'>Humidity {h}</text>\n\n        </svg>\n    </div>\n\n}\n\nexport default Today\n","import React from 'react'\n\nconst Description = (props) => {\n    return <div>{props.temperature}&nbsp;&nbsp;{props.humidity}&nbsp;&nbsp;{props.windSpeed}</div>\n}\n\nexport default Description\n","import React from 'react'\nimport Description from './smallDescription'\n\nconst Day = (props) => {\n    const bgColor = 'lightyellow';\n\n    //Series are array of becoming temperatures for every hour\n    const tSeries = props.data.temperature\n    const hSeries = props.data.humidity\n    const wSeries = props.data.windSpeed\n\n    const average = (array) => {return array.reduce(function(a, b) { return a + b; })}\n\n    const tMax = Math.round(Math.max.apply(Math, tSeries))\n    const t = tMax + ' °C'\n\n    const h = Math.round(average(hSeries)/hSeries.length) + ' %'\n    const w = Math.round(average(wSeries)/hSeries.length) + ' m/s'\n\n    return <div className='dayPanel' style={{ backgroundColor: bgColor }}>\n\n        <span className='dayName'>{props.weekdayName}</span> <Description temperature={t} humidity={h} windSpeed={w}/>\n    </div>\n}\n\nexport default Day\n","import React, { useState, useEffect } from 'react'\nimport Day from './dayPanel'\n\nconst WeekPanel = (props) => {\n\n\n    const [data, setData] = useState([\n        {\n            temperature: [0,0,0],\n            windSpeed:[0,0,0],\n            humidity:[0,0,0]\n        },\n        {\n            temperature: [0,0,0],\n            windSpeed:[0,0,0],\n            humidity:[0,0,0]\n        }\n    ])\n\n    useEffect(() => {\n        //data extraction tools\n        const getTemperatureSeries = (forecast,startOfDay,endOfDay) => {\n            // console.log('timeStamp' + new Date(startOfDay) + 'endOfDay' + new Date(endOfDay))\n            let result = []\n            const valuePairs = forecast.locations[0].data.Temperature.timeValuePairs\n            for ( let i = 0; i < valuePairs.length; i++) {\n                let timeStamp = new Date(valuePairs[i].time)\n                if ( startOfDay < timeStamp && timeStamp < endOfDay) {\n\n                    result.push(valuePairs[i].value)\n                    console.log(timeStamp + valuePairs[i].value)\n                }\n            }\n            return result\n        }\n        const getWindSpeedSeries = (forecast,startOfDay,endOfDay) => {\n            // console.log(forecast.locations[0].data)\n            let result = []\n            const valuePairs = forecast.locations[0].data.WindSpeedMS.timeValuePairs\n            for ( let i = 0; i < valuePairs.length; i++) {\n                let timeStamp = new Date(valuePairs[i].time)\n                if ( startOfDay < timeStamp && timeStamp < endOfDay) {\n\n                    result.push(valuePairs[i].value)\n                }\n            }\n            return result\n        }\n        const getHumiditySeries = (forecast,startOfDay,endOfDay) => {\n            let result = []\n            const valuePairs = forecast.locations[0].data.Humidity.timeValuePairs\n            for ( let i = 0; i < valuePairs.length; i++) {\n                let timeStamp = new Date(valuePairs[i].time)\n                if ( startOfDay < timeStamp && timeStamp < endOfDay) {\n\n                    result.push(valuePairs[i].value)\n                }\n            }\n            return result\n        }\n\n        if (props.data.locations) {\n            const now = new Date()\n            const GMT = 3\n            //tomorrow morning 0 am\n            const startOfDay = new Date( now.valueOf() - now.valueOf()%(1000*60*60*24) + 1000*60*60*24*1 - 1000*60*60*GMT )\n            const endOfDay = new Date(startOfDay.valueOf() + 1000*60*60*24)\n            const endOfSecondDay = new Date(endOfDay.valueOf() + 1000*60*60*24)\n            setData([\n                {\n                    temperature: getTemperatureSeries(props.data,startOfDay,endOfDay),\n                    windSpeed: getWindSpeedSeries(props.data,startOfDay,endOfDay), humidity:getHumiditySeries(props.data,startOfDay,endOfDay)\n                },\n                {\n                    temperature: getTemperatureSeries(props.data,endOfDay,endOfSecondDay),\n                    windSpeed: getWindSpeedSeries(props.data,endOfDay,endOfSecondDay), humidity:getHumiditySeries(props.data,endOfDay,endOfSecondDay)\n                }\n            ])\n        }\n\n    },[props.data])\n\n\n    const tomorrow = data[0]\n    const theDayAfter = data[1]\n\n    const weekdays =  ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']\n    const tomorrowName = weekdays[new Date().getDay()+1]\n    const theDayAfterName = weekdays[new Date().getDay()+2]\n\n    return <div>\n        <Day weekdayName={tomorrowName} data={tomorrow}/>\n        <Day weekdayName={theDayAfterName} data={theDayAfter}/>\n    </div>\n}\n\nexport default WeekPanel\n","import React, { useState, useEffect } from 'react'\nimport forecastService from '../services/forecastService'\nimport Metolib from '@fmidev/metolib'\nimport Today from './weather/todayPanel.js'\nimport WeekPanel from './weather/weekPanel.js'\nimport './weather.css'\n\nconst Weather = (props) => {\n\n    const [location, setLocation] = useState(props.initLocation)\n    const [inputColor, setInputColor] = useState('white') //'#e6ffe6'\n    const [forecast, setForecast] = useState([])\n\n    useEffect(()=> {\n        if ( process.env.NODE_ENV !== \"production\" ) {\n            forecastService.forecast3Days(location)\n                .then(newData => {\n                    setForecast(newData)\n                    setInputColor('#e6ffe6')\n                    setTimeout(() => {setInputColor('white')}, 1000)\n                })\n                .catch(error => {\n                    setInputColor('#ffcccc')\n                })\n        } else {\n            const SERVER_URL = 'http://opendata.fmi.fi/wfs'\n\t        //\n\t        //fmi::observations::weather::multipointcoverage\n\t        const STORED_QUERY_OBSERVATION = 'fmi::forecast::harmonie::surface::point::multipointcoverage'\n\n\t        let connection = new Metolib.WfsConnection()\n\t        if (connection.connect(SERVER_URL, STORED_QUERY_OBSERVATION)) {\n\t            // Connection was properly initialized. So, get the data.\n                // console.log('end of forecast: ',new Date(new Date().valueOf() + 3*24*60*60*1000))\n\t            //GeopHeight,Temperature,Pressure,Humidity,WindDirection,WindSpeedMS,WindUMS,WindVMS,MaximumWind,WindGust,DewPoint,TotalCloudCover,WeatherSymbol3,LowCloudCover,MediumCloudCover,HighCloudCover,Precipitation1h,PrecipitationAmount,RadiationGlobalAccumulation,RadiationLWAccumulation,RadiationNetSurfaceLWAccumulation,RadiationNetSurfaceSWAccumulation,RadiationDiffuseAccumulation,LandSeaMask\n\t            connection.getData({\n\t                requestParameter: 'Temperature,Humidity,WindDirection,WindSpeedMS',\n\t                begin: new Date(),\n\t                end: new Date(new Date().valueOf() + 3*24*60*60*1000),//1 368 352 800 000\n\t                timestep: 60 * 60 * 1000,\n\t                sites: location,\n\t                callback: function(data, errors) {\n\t                    // Handle the data and errors object in a way you choose.\n                        if ( data.info ) {\n                            setForecast(data)\n                            console.log(data)\n                            setInputColor('#e6ffe6')\n                        }\n\n\t                    // console.log('todayForecast: ', data)\n\t                    if ( errors.length > 0 ) {\n\t                        console.log('Errors!: ',errors)\n                            setInputColor('#ffcccc')\n\t                    }\n\t                    // Disconnect because the flow has finished.\n\t                    connection.disconnect()\n\t                }\n\t            })\n            }\n        }\n\n    }, [location])\n\n    const handleLocationChange = (event) => {\n        setLocation(event.target.value)\n    }\n\n    return <div className='weatherContainer'>\n        <input\n            type='text'\n            onChange={handleLocationChange}\n            value={location}\n            style={{backgroundColor: inputColor}}\n            className='textInput'\n        />\n            <div className='weatherPanel'>\n                <Today className='weatherPanelItem' data={forecast}/>\n                <WeekPanel className='weatherPanelItem' data={forecast}/>\n            </div>\n        </div>\n}\n\nexport default Weather\n","import React from 'react'\nimport Weather from './components/weather'\nimport './App.css'\n\nfunction App() {\n\n    const city = 'Helsinki'\n\n    return (\n        <div className=\"App\">\n            Hello {city}!\n            <Weather\n                initLocation={city}\n            />\n        </div>\n    )\n\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}